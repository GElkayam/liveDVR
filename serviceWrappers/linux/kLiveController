#!/bin/bash
# An init.d script for running a Node.js process as a service using Forever as
# the process monitor. For more configuration options associated with Forever,
# see: https://github.com/nodejitsu/forever
#
# Live:              This shell script takes care of starting and stopping the Kaltura kLive Controller service
#
# chkconfig: 2345 13 87
# description: Kaltura Live Controller

### BEGIN INIT INFO
# Provides:          kLiveController
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     true
# Short-Description: Start/stop Kaltura Live Controller
### END INIT INFO

NAME="kLive Controller"
KLIVE_CONTROLLER_PREFIX="/opt/kaltura/liveController"
NODE_PATH="$KLIVE_CONTROLLER_PREFIX/node_modules"
FOREVER="$NODE_PATH/forever/bin/forever"
APPLICATION_PATH="$KLIVE_CONTROLLER_PREFIX/lib/App.js"
LOG_DIR="/var/log"
PIDFILE="$LOG_DIR/kLiveController.pid"
LOGFILE="$LOG_DIR/kLiveController-forever.log"
MIN_UPTIME="5000"
SPIN_SLEEP_TIME="2000"
export PATH=$PATH:$NODE_PATH/forever/bin:/usr/local/bin

start() {
    echo "Starting $NAME"
    $FOREVER \
      --pidFile $PIDFILE \#!/bin/bash
                          # An init.d script for running a Node.js process as a service using Forever as
                          # the process monitor. For more configuration options associated with Forever,
                          # see: https://github.com/nodejitsu/forever
                          #
                          # Live:              This shell script takes care of starting and stopping the Kaltura kLive Controller service
                          #
                          # chkconfig: 2345 13 87
                          # description: Kaltura Live Controller

                          ### BEGIN INIT INFO
                          # Provides:          kLiveController
                          # Required-Start:    $local_fs $remote_fs $network
                          # Required-Stop:     $local_fs $remote_fs $network
                          # Default-Start:     2 3 4 5
                          # Default-Stop:      0 1 6
                          # X-Interactive:     true
                          # Short-Description: Start/stop Kaltura Live Controller
                          ### END INIT INFO

                          NAME="kLive Controller"
                          KLIVE_CONTROLLER_PREFIX="/opt/kaltura/liveController"
                          NODE_PATH="$KLIVE_CONTROLLER_PREFIX/node_modules"
                          FOREVER="$NODE_PATH/forever/bin/forever"
                          APPLICATION_PATH="$KLIVE_CONTROLLER_PREFIX/lib/App.js"
                          LOG_DIR="/var/log"
                          PIDFILE="$LOG_DIR/kLiveController.pid"
                          LOGFILE="$LOG_DIR/kLiveController-forever.log"
                          MIN_UPTIME="5000"
                          SPIN_SLEEP_TIME="2000"
                          export PATH=$PATH:$NODE_PATH/forever/bin:/usr/local/bin

                          start() {
                              echo "Starting $NAME"
                              $FOREVER \
                                --pidFile $PIDFILE \
                                -a \
                                -l $LOGFILE \
                                --minUptime $MIN_UPTIME \
                                --spinSleepTime $SPIN_SLEEP_TIME \
                          	  start $APPLICATION_PATH prefix:0&
                              echo "Starting $NAME"
                              $FOREVER \
                                --pidFile $PIDFILE \
                                -a \
                                -l $LOGFILE \
                                --minUptime $MIN_UPTIME \
                                --spinSleepTime $SPIN_SLEEP_TIME \
                                start $APPLICATION_PATH prefix:1&
                              RETVAL=$?
                          }

                          stop() {
                              if [ -f $PIDFILE ]; then
                              #if status() -eq 0  then
                                  echo "Shutting down $NAME"
                                  # Tell Forever to stop the process.
                                  $FOREVER stop $APPLICATION_PATH 2>&1 > /dev/null
                                  # Get rid of the pidfile, since Forever won't do that.
                                  rm -f $PIDFILE
                                  RETVAL=$?
                              else
                                  echo "$NAME is not running."
                                  RETVAL=0
                              fi
                          }

                          restart() {
                              stop
                              start
                          }

                          status() {
                              STATUS=$($FOREVER list | grep -i "app.js" | awk '{print $8}' | wc -l)
                              if [ -z "$STATUS" ]; then
                                  echo "$NAME is not running."
                                  RETVAL=3
                              else
                                  echo "$NAME is running."
                                  RETVAL=0
                              fi
                          }

                          logRotated() {
                                  if [ -f $PIDFILE ]; then
                                          echo "Notify log rotate for $NAME."
                                          kill -USR1 `cat $PIDFILE`
                                          RETVAL=1
                                  else
                                          echo "$NAME is not running."
                                          RETVAL=0
                                  fi
                          }

                          case "$1" in
                              start)
                                  start
                                  ;;
                              stop)
                                  stop
                                  ;;
                              status)
                                  status
                                  ;;
                              restart)
                                  restart
                                  ;;
                           	logRotated)
                                  logRotated
                                  ;;

                              *)
                                  echo "Usage: {start|stop|status|restart|logRotated}"
                                  exit 1
                                  ;;
                          esac
                          exit $RETVAL

      -a \
      -l $LOGFILE \
      --minUptime $MIN_UPTIME \
      --spinSleepTime $SPIN_SLEEP_TIME \
	  start $APPLICATION_PATH prefix:0&
    echo "Starting $NAME"
    $FOREVER \
      --pidFile $PIDFILE \
      -a \
      -l $LOGFILE \
      --minUptime $MIN_UPTIME \
      --spinSleepTime $SPIN_SLEEP_TIME \
      start $APPLICATION_PATH prefix:1&
    RETVAL=$?
}

stop() {
    if [ -f $PIDFILE ]; then
    #if status() -eq 0  then
        echo "Shutting down $NAME"
        # Tell Forever to stop the process.
        $FOREVER stop $APPLICATION_PATH 2>&1 > /dev/null
        # Get rid of the pidfile, since Forever won't do that.
        rm -f $PIDFILE
        RETVAL=$?
    else
        echo "$NAME is not running."
        RETVAL=0
    fi
}

restart() {
    stop
    start
}

status() {
    STATUS=$($FOREVER list | grep -i "app.js" | awk '{print $8}' | wc -l)
    if [ -z "$STATUS" ]; then
        echo "$NAME is not running."
        RETVAL=3
    else
        echo "$NAME is running."
        RETVAL=0
    fi
}

logRotated() {
        if [ -f $PIDFILE ]; then
                echo "Notify log rotate for $NAME."
                kill -USR1 `cat $PIDFILE`
                RETVAL=1
        else
                echo "$NAME is not running."
                RETVAL=0
        fi
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    restart)
        restart
        ;;
 	logRotated)
        logRotated
        ;;

    *)
        echo "Usage: {start|stop|status|restart|logRotated}"
        exit 1
        ;;
esac
exit $RETVAL
